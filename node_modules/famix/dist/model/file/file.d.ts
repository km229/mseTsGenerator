import { FamixMseExporter } from "../../famix_mse_exporter";
import { AbstractFile } from "./../file/abstract_file";
export declare class File extends AbstractFile {
    private fileNumberOfInternalClones;
    getNumberOfInternalClones(): number;
    setNumberOfInternalClones(fileNumberOfInternalClones: number): void;
    private fileTotalNumberOfLinesOfText;
    getTotalNumberOfLinesOfText(): number;
    setTotalNumberOfLinesOfText(fileTotalNumberOfLinesOfText: number): void;
    private fileNumberOfKiloBytes;
    getNumberOfKiloBytes(): number;
    setNumberOfKiloBytes(fileNumberOfKiloBytes: number): void;
    private fileNumberOfDuplicatedFiles;
    getNumberOfDuplicatedFiles(): number;
    setNumberOfDuplicatedFiles(fileNumberOfDuplicatedFiles: number): void;
    private fileNumberOfEmptyLinesOfText;
    getNumberOfEmptyLinesOfText(): number;
    setNumberOfEmptyLinesOfText(fileNumberOfEmptyLinesOfText: number): void;
    private fileNumberOfCharacters;
    getNumberOfCharacters(): number;
    setNumberOfCharacters(fileNumberOfCharacters: number): void;
    private fileAverageNumberOfCharactersPerLine;
    getAverageNumberOfCharactersPerLine(): number;
    setAverageNumberOfCharactersPerLine(fileAverageNumberOfCharactersPerLine: number): void;
    private fileNumberOfLinesOfText;
    getNumberOfLinesOfText(): number;
    setNumberOfLinesOfText(fileNumberOfLinesOfText: number): void;
    private fileNumberOfExternalClones;
    getNumberOfExternalClones(): number;
    setNumberOfExternalClones(fileNumberOfExternalClones: number): void;
    private fileNumberOfInternalMultiplications;
    getNumberOfInternalMultiplications(): number;
    setNumberOfInternalMultiplications(fileNumberOfInternalMultiplications: number): void;
    private fileNumberOfBytes;
    getNumberOfBytes(): number;
    setNumberOfBytes(fileNumberOfBytes: number): void;
    getMSE(): string;
    addPropertiesToExporter(exporter: FamixMseExporter): void;
}
